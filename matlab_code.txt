# pack_cmd

function buf  = pack_cmd(p_in, v_in, t_in)

P_MIN = -12.5;
P_MAX = 12.5;
V_MIN = -8.0;
V_MAX = 8.0;
KP_MIN = 0.0;
KP_MAX = 500.0;
KD_MIN = 0.0;
KD_MAX = 5.0;
T_MIN = -144.0;
T_MAX = 144.0;
    
p_int = float_to_uint(p_des, P_MIN, P_MAX, 16);
v_int = float_to_uint(v_des, V_MIN, V_MAX, 12);
kp_int = float_to_uint(kp, KP_MIN, KP_MAX, 12);
kd_int = float_to_uint(kd, KD_MIN, KD_MAX, 12);
t_int = float_to_uint(t_ff, T_MIN, T_MAX, 12);

buf = [0 0 0 0 0 0 0 0];

buf(0) = bitshift(p_int,8);
buf(1) = p_int & 0xFF;
buf(2) = bitshift(v_int, 4);
buf(3) = bitshift(v_int & 0xF, 4) | bitshift(kp_int, 8);
buf(4) = kp_int & 0xFF;
buf(5) = bitshift(kd_int, 4);
buf(6) = bitshift(kd_int & 0xF, 4) | bitshift(t_int, 8);
buf(7) = t_int & 0xFF;


function [pgg] = float_to_uint(x, x_min, x_max, bits)
span = x_max - x_min;
offset = x_min;
pgg = 0;

if (bits == 12)
    pgg = (x - offset) * 4095.0/ span;
elseif (bits == 16)
    pgg = (x - offset) * 65535.0/ span;
end

# unpack_cmd

function [p_out, v_out, t_out] = unpack_reply(buff)

P_MIN = -12.5;
P_MAX = 12.5;
V_MIN = -8.0;
V_MAX = 8.0;
KP_MIN = 0.0;
KP_MAX = 500.0;
KD_MIN = 0.0;
KD_MAX = 5.0;
T_MIN = -144.0;
T_MAX = 144.0;

id = buf(0);
p_int = bitshift(buf(1), 8) | buf(2);
v_int = bitshift(buf(3), 4) | bitshift(buf(4), 4);
i_int = bitshift(buf(4) & 0xF, 8) | buf(5);

p_out = uint_to_float(p_int, P_MIN, P_MAX, 16);
v_out = uint_to_float(v_int, V_MIN, V_MAX, 12);
t_out = uint_to_float(i_int, -T_MAX, T_MAX, 12);


function [pgg] = uint_to_float(x_int, x_min, x_max, bits)

span = x_max - x_min;
offset = x_min;
pgg = 0;
if (bits == 12)
    pgg = x_int * span / 4095.0 + offset;
elseif (bits == 16)
    pgg = x_int * span / 65535.0 + offset;
end